/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package com.location.controller;

import com.location.model.PoiGetReturnModel;
import com.location.model.PoiPostRequestModel;
import com.location.model.PoiPostReturnModel;
import com.location.model.PoiPutRequestModel;
import com.location.model.SearchNearestReturnModel;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.UUID;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
public interface PoiApi {

  /**
   * POST /api/v1/poi Insert poi
   *
   * @param X_ACCOUNT_ID (required)
   * @param poiPostRequestModel Poi to be added (required)
   * @return Created (status code 201) or Bad request! (status code 400) or Conflict! (status code
   *     409)
   */
  @RequestMapping(
      method = RequestMethod.POST,
      value = "/api/v1/poi",
      produces = {"application/json"},
      consumes = {"application/json"})
  ResponseEntity<PoiPostReturnModel> addPoi(
      @NotNull @RequestHeader(value = "X-ACCOUNT-ID", required = true) UUID X_ACCOUNT_ID,
      @Valid @RequestBody PoiPostRequestModel poiPostRequestModel)
      throws Exception;

  /**
   * GET /api/v1/poi/distance/{meters} get nearest Pois
   *
   * @param X_ACCOUNT_ID (required)
   * @param meters (required)
   * @param latitude (required)
   * @param longitude (required)
   * @param page (required)
   * @param pageSize (optional)
   * @return Retrieved (status code 200) or Bad request! (status code 400)
   */
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/api/v1/poi/distance/{meters}",
      produces = {"application/json"})
  ResponseEntity<SearchNearestReturnModel> getNearestPois(
      @NotNull @RequestHeader(value = "X-ACCOUNT-ID", required = true) UUID X_ACCOUNT_ID,
      @PathVariable("meters") Integer meters,
      @NotNull @Valid @RequestParam(value = "latitude", required = true) Float latitude,
      @NotNull @Valid @RequestParam(value = "longitude", required = true) Float longitude,
      @NotNull @Valid @RequestParam(value = "page", required = true) Integer page,
      @Min(20) @Max(100) @Valid @RequestParam(value = "page-size", required = false)
          Integer pageSize)
      throws Exception;

  /**
   * GET /api/v1/poi/{poi-id} get Poi
   *
   * @param X_ACCOUNT_ID (required)
   * @param poiId (required)
   * @return Retrieved (status code 200) or Not found! (status code 404)
   */
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/api/v1/poi/{poi-id}",
      produces = {"application/json"})
  ResponseEntity<PoiGetReturnModel> getPoi(
      @NotNull @RequestHeader(value = "X-ACCOUNT-ID", required = true) UUID X_ACCOUNT_ID,
      @PathVariable("poi-id") Long poiId)
      throws Exception;

  /**
   * PUT /api/v1/poi/{poi-id} update Poi
   *
   * @param X_ACCOUNT_ID (required)
   * @param poiId (required)
   * @param poiPutRequestModel Poi to be updated (required)
   * @return updated (status code 200) or Bad request! (status code 400) or Not found! (status code
   *     404)
   */
  @RequestMapping(
      method = RequestMethod.PUT,
      value = "/api/v1/poi/{poi-id}",
      produces = {"application/json"},
      consumes = {"application/json"})
  ResponseEntity<PoiPostReturnModel> updatePoi(
      @NotNull @RequestHeader(value = "X-ACCOUNT-ID", required = true) UUID X_ACCOUNT_ID,
      @PathVariable("poi-id") Long poiId,
      @Valid @RequestBody PoiPutRequestModel poiPutRequestModel)
      throws Exception;
}
